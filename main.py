from dotenv import load_dotenv
from portia import Config, Portia, PortiaToolRegistry
from portia.cli import CLIExecutionHooks
from portia.config import LLMModel  # Changed from portia.models

load_dotenv(override=True)

print("Your require a Google Calandar account to use this Scheduler.")

day = input(
    "Please tell me which day you want to plan for.\n"
)

start = input(
    "Please tell me what time you want to start your day.\n"
    )

end = input(
    "Please tell me what time you want to finish your day.\n"
)

prompt = input(
    "Please input everything you want to do on that day. Any events without specified durations will have a duration esitmated.\n"
    "Events will be scheduled around your current events on your calender.\n"
)


constraints = []


# availability = (
#     lambda: f"""
# Check my Google Calendar for my availability on this date: {day}. Tell me what times I am not available and why for every event.
# If I am availible all day, please reply with "Available all day".
# """
# )


task = (
    lambda: f"""
I am going to provide you with a list of events I want to do on that day and I would like you to add them to my google calendar. 
Plan my events on this specific day: {day}.


Make sure to schedule the events in a way that makes sense and is efficient.
Ensuring you take into account the following constraints ({"".join(constraints)}), do the following:
- Find when I am free between {start} and {end}
- Add the following events to my google calendar: {prompt}
- Make the description of the event "Generated by Portia"
- Leave the atendee list empty
"""
)

print("\nPlanning your day...")


# Instantiate a Portia runner. Load it with the default config and with Portia cloud tools above.
# Use the CLIExecutionHooks to allow the user to handle any clarifications at the CLI.
my_config = Config.from_default(
    models={
        "planning_default_model_name": LLMModel.GPT_4_O,
        "default_model_name": LLMModel.GPT_4_O
    }
)

portia = Portia(
    config=my_config,
    tools=PortiaToolRegistry(my_config),
    execution_hooks=CLIExecutionHooks(),
)

# Generate the plan from the user query and print it
plan = portia.plan(task())
print("\nHere is your plan:")
[print(step.model_dump_json(indent=2)) for step in plan.steps]

# Iterate on the plan with the user until they are happy with it AND they have authed
ready_to_proceed = False
while not ready_to_proceed:
    user_input = input("Are you happy with the plan? (y/n):\n")
    if user_input == "y":
        ready_to_proceed = True
    else:
        user_input = input("Any additional guidance for the planner?:\n")
        constraints.append(user_input)
        plan = portia.plan(task())
        print("\nHere are the updated steps in the plan:")
        [print(step.model_dump_json(indent=2)) for step in plan.steps]

# Execute the plan
print("\nThe plan will now be executed. Please wait...")
plan_run = portia.run_plan(plan)

# Serialise into JSON and print the output
print(f"{plan_run.model_dump_json(indent=2)}")
